data structure

data structure
- 정의 : 현실의 문제를 컴퓨터적 또는 프로그래밍적으로 어떻게 표현할 수 있는지에 대한 것이다.
- 특징 : 거대한 데이터를 효과적으로 관리하는 것
- 목적, 목표
  : 많은 양의 데이터를 효율적으로 관리하기 위한 복합적 시스템을 구축하는 것

array(배열)
- 정의 : 여러 데이터를 하나의 이름으로 그룹핑해서 관리하기위한 데이터 스트럭쳐
- 데이터가 많아지면 그룹 관리의 필요성이 발생한다. 이때 프로그래밍 적으로 그룹 관리를 위해 사용하는 것이 배열이다.
- 장점 : 데이터를 그룹으로 관리할 수 있다. 즉, 그룹에 대한 데이터들만 처리할 수 있다.
* 반복문(while, for, iterator)을 사용한다.
- 용어
  1) value : 각각의 값
  2) index(색인) : 고유한 번호, 데이터를 식별해주는 역할을 한다.
  3) element : value + index
- 사용법
  1) create(생성)
    ex. int[] numbers1 = new int[4];
    ex. numbers1[0] = 10;
    ex. int[] numbers2 = {10, 20, 30, 40}; : 배열의 생성과 대입을 동시에 진행
    ex. int[] numbers1 = new int[]{10, 20, 30, 40}; : 배열의 생성과 대입을 동시에 진행
  2) get(가져오기)
    ex. System.out.println(numbers1[0]);
  * 값을 설정하지 않은 엘리먼트의 value는 0 또는 null을 기본값으로 가지고 있다.
  3) size(크기)
    ex. System.out.println(numbers1.lengh);
    : 인스턴스 변수 length에는 해당 배열 객체의 엘리먼트 개수가 대입되어있다.(설정하지않은 엘리먼트를 포함한다.)
  4) iteration(반복)
  - 배열이라는 연관되어있는 값들을 순차적으로 처리하고자 할 때 사용한다.(while, for ...)
  - 단점
    : 크기가 정해져있다.
    : 기능이 없다.
  - 장점
    : 크기가 정해져있다, 기능이 없다. > 작고 가볍다, 단순하다 > 좋은 부품이 될 수 있다.

list
- 순서대로 저장된다.
- 중복저장을 허용한다.
- 기능(operation)
  1) 처음, 끝, 중간에 엘리먼트를 추가/삭제하는 기능
  2) 리스트에 데이터가 있는지를 체크하는 기능
  3) 리스트의 모든 데이터에 접근할 수 있는 기능


array와 list 비교
- 공통점
  1) 순서대로 저장된다.
  2) 중복저장을 허용한다.
- 차이점
  1) array는 인덱스가 중요하다. 인덱스를 가지고 자료를 바로 찾을 수 있다. 인덱스는 변동하지 않으므로 해당 value의 식별자로서의 의미를 가진다.
  2) list는 인덱스를 가지고 있지만, 데이터의 저장 순서가 더욱 중요하게 여겨진다, 인덱스(변동가능)는 데이터의 순서 이상의 의미를 갖지 않는다.
- 기존 value가 존재하는 인덱스에 데이터를 대입할 경우
  1) array의 경우 기존의 value는 사라진다.(덮어쓰기)
  2) list의 경우 기존 value의 인덱스는 뒤로 밀리고 새로운 데이터가 해당 인덱스로 대입된다.
- 데이터를 삭제하는 경우
  1) array의 경우 해당 인덱스의 value가 삭제되고 다른 index의 데이터는 변동하지 않는다. (반복문을 사용할 경우 비어있는 index에 대한 체크가 필요하다, 빈공간에 대한 메모리를 차지한다.)
  2) list의 경우 뒤의 데이터가 삭제된 데이터의 index에 대입된다.(앞으로 당겨진다, 비어있는 데이터가 없으므로 반복문 사용시 비어있는 index에 대한 체크가 필요하지 않다.)

언어별 array, list 비교
- C : array 지원, list는 개발자가 직접 만들거나 타인의 라이브러리 이용 필요
- JavaScript : array 지원, array의 splice() 메소드를 이용하여 list기능 지원(배열이 리스트)
- Python : list 지원(pop메소드를 이용하여 데이터 삭제), list가 array(?)
- Java : array와 list(ArrayList)를 독립된 문법으로 모두 지원

ArrayList
- 특징
  1) 데이터의 추가/삭제가 느리다.
    : 해당 인덱스 뒤의 데이터를 전부 하나씩 뒤로(추가) 옮기거나 앞으로(삭제) 당겨야한다. 
  2) 인덱스 조회가 빠르다.
    : 인덱스가 변동하지 않으므로 인덱스로 원하는 value를 가져올 수 있다.
  3) list를 만들때 내부적으로 배열을 사용한다.
  4) size 인스턴스 변수에 리스트의 크기가 대입되어있다.

LinkedList
  1) 데이터의 추가/삭제가 빠르다.
  2) 인덱스 조회가 느리다.
  3) 배열이 아닌 다른 방법을 사용한다.

데이터 스트럭쳐는 언어마다 다르다.
